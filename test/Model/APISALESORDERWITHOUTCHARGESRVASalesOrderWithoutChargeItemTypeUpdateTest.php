<?php
/**
 * APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeUpdateTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrderWOCharge
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order Without Charge (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders without charge or only parts of the data, using the provided filters.   - You can create sales orders without charge. Note that you must use “deep insert” requests (a header plus the following entities: header partner, item and item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can create new items. Note that you must use “deep insert” requests (with the entity: item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can update the header, header partner, item and item partner.   - For existing sales orders without charge, you can delete the header, header partner, item and item partner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace BeLenka\SAP\SalesOrderWOCharge\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeUpdateTest Class Doc Comment
 *
 * @category    Class
 * @description APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeUpdate
 * @package     BeLenka\SAP\SalesOrderWOCharge
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeUpdateTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeUpdate"
     */
    public function testAPISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "higher_level_item"
     */
    public function testPropertyHigherLevelItem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sls_ord_wthout_chrg_item_category"
     */
    public function testPropertySlsOrdWthoutChrgItemCategory()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sales_order_wthout_chrg_item_text"
     */
    public function testPropertySalesOrderWthoutChrgItemText()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "purchase_order_by_customer"
     */
    public function testPropertyPurchaseOrderByCustomer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "material"
     */
    public function testPropertyMaterial()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "material_by_customer"
     */
    public function testPropertyMaterialByCustomer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "requested_quantity"
     */
    public function testPropertyRequestedQuantity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "requested_quantity_unit"
     */
    public function testPropertyRequestedQuantityUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "requested_quantity_sap_unit"
     */
    public function testPropertyRequestedQuantitySapUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "requested_quantity_iso_unit"
     */
    public function testPropertyRequestedQuantityIsoUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "item_weight_sap_unit"
     */
    public function testPropertyItemWeightSapUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "item_weight_iso_unit"
     */
    public function testPropertyItemWeightIsoUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "item_volume_sap_unit"
     */
    public function testPropertyItemVolumeSapUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "item_volume_iso_unit"
     */
    public function testPropertyItemVolumeIsoUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "material_group"
     */
    public function testPropertyMaterialGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "material_pricing_group"
     */
    public function testPropertyMaterialPricingGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "batch"
     */
    public function testPropertyBatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "plant"
     */
    public function testPropertyPlant()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "storage_location"
     */
    public function testPropertyStorageLocation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shipping_point"
     */
    public function testPropertyShippingPoint()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shipping_type"
     */
    public function testPropertyShippingType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "delivery_priority"
     */
    public function testPropertyDeliveryPriority()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "delivery_date_type_rule"
     */
    public function testPropertyDeliveryDateTypeRule()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "incoterms_classification"
     */
    public function testPropertyIncotermsClassification()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "incoterms_transfer_location"
     */
    public function testPropertyIncotermsTransferLocation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "incoterms_location1"
     */
    public function testPropertyIncotermsLocation1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "incoterms_location2"
     */
    public function testPropertyIncotermsLocation2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sales_document_rjcn_reason"
     */
    public function testPropertySalesDocumentRjcnReason()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "wbs_element"
     */
    public function testPropertyWbsElement()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "profit_center"
     */
    public function testPropertyProfitCenter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reference_sd_document"
     */
    public function testPropertyReferenceSdDocument()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reference_sd_document_item"
     */
    public function testPropertyReferenceSdDocumentItem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
