<?php
/**
 * HeaderPartnerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrderWOCharge
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order Without Charge (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders without charge or only parts of the data, using the provided filters.   - You can create sales orders without charge. Note that you must use “deep insert” requests (a header plus the following entities: header partner, item and item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can create new items. Note that you must use “deep insert” requests (with the entity: item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can update the header, header partner, item and item partner.   - For existing sales orders without charge, you can delete the header, header partner, item and item partner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrderWOCharge\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\SalesOrderWOCharge\ApiException;
use BeLenka\SAP\SalesOrderWOCharge\Configuration;
use BeLenka\SAP\SalesOrderWOCharge\HeaderSelector;
use BeLenka\SAP\SalesOrderWOCharge\ObjectSerializer;

/**
 * HeaderPartnerApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrderWOCharge
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeaderPartnerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet' => [
            'application/json',
        ],
        'aSlsOrdWthoutChrgPartnerGet' => [
            'application/json',
        ],
        'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete' => [
            'application/json',
        ],
        'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet' => [
            'application/json',
        ],
        'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch' => [
            'application/json',
        ],
        'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet
     *
     * Reads the header partners of a specific sales order without charge.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2|\BeLenka\SAP\SalesOrderWOCharge\Model\Error
     */
    public function aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet($sales_order_without_charge, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'][0])
    {
        list($response) = $this->aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetWithHttpInfo($sales_order_without_charge, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetWithHttpInfo
     *
     * Reads the header partners of a specific sales order without charge.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2|\BeLenka\SAP\SalesOrderWOCharge\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetWithHttpInfo($sales_order_without_charge, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'][0])
    {
        $request = $this->aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetRequest($sales_order_without_charge, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetAsync
     *
     * Reads the header partners of a specific sales order without charge.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetAsync($sales_order_without_charge, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'][0])
    {
        return $this->aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetAsyncWithHttpInfo($sales_order_without_charge, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetAsyncWithHttpInfo
     *
     * Reads the header partners of a specific sales order without charge.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetAsyncWithHttpInfo($sales_order_without_charge, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2';
        $request = $this->aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetRequest($sales_order_without_charge, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGetRequest($sales_order_without_charge, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'][0])
    {

        // verify the required parameter 'sales_order_without_charge' is set
        if ($sales_order_without_charge === null || (is_array($sales_order_without_charge) && count($sales_order_without_charge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_without_charge when calling aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet'
            );
        }
        if (strlen($sales_order_without_charge) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_without_charge" when calling HeaderPartnerApi.aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling HeaderPartnerApi.aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling HeaderPartnerApi.aSalesOrderWithoutChargeSalesOrderWithoutChargeToPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderWithoutCharge(\'{SalesOrderWithoutCharge}\')/to_Partner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order_without_charge !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderWithoutCharge' . '}',
                ObjectSerializer::toPathValue($sales_order_without_charge),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerGet
     *
     * Reads the header partners of all sales order without charges.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2|\BeLenka\SAP\SalesOrderWOCharge\Model\Error
     */
    public function aSlsOrdWthoutChrgPartnerGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerGet'][0])
    {
        list($response) = $this->aSlsOrdWthoutChrgPartnerGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerGetWithHttpInfo
     *
     * Reads the header partners of all sales order without charges.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2|\BeLenka\SAP\SalesOrderWOCharge\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSlsOrdWthoutChrgPartnerGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerGet'][0])
    {
        $request = $this->aSlsOrdWthoutChrgPartnerGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerGetAsync
     *
     * Reads the header partners of all sales order without charges.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerGet'][0])
    {
        return $this->aSlsOrdWthoutChrgPartnerGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerGetAsyncWithHttpInfo
     *
     * Reads the header partners of all sales order without charges.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\Wrapper2';
        $request = $this->aSlsOrdWthoutChrgPartnerGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSlsOrdWthoutChrgPartnerGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSlsOrdWthoutChrgPartnerGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SlsOrdWthoutChrgPartner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete
     *
     * Deletes the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete($sales_order_without_charge, $partner_function, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'][0])
    {
        $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteWithHttpInfo($sales_order_without_charge, $partner_function, $contentType);
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteWithHttpInfo
     *
     * Deletes the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteWithHttpInfo($sales_order_without_charge, $partner_function, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'][0])
    {
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteRequest($sales_order_without_charge, $partner_function, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteAsync
     *
     * Deletes the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteAsync($sales_order_without_charge, $partner_function, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'][0])
    {
        return $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteAsyncWithHttpInfo($sales_order_without_charge, $partner_function, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteAsyncWithHttpInfo
     *
     * Deletes the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteAsyncWithHttpInfo($sales_order_without_charge, $partner_function, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'][0])
    {
        $returnType = '';
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteRequest($sales_order_without_charge, $partner_function, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDeleteRequest($sales_order_without_charge, $partner_function, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'][0])
    {

        // verify the required parameter 'sales_order_without_charge' is set
        if ($sales_order_without_charge === null || (is_array($sales_order_without_charge) && count($sales_order_without_charge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_without_charge when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'
            );
        }
        if (strlen($sales_order_without_charge) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_without_charge" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionDelete, must be smaller than or equal to 2.');
        }
        

        $resourcePath = '/A_SlsOrdWthoutChrgPartner(SalesOrderWithoutCharge=\'{SalesOrderWithoutCharge}\',PartnerFunction=\'{PartnerFunction}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order_without_charge !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderWithoutCharge' . '}',
                ObjectSerializer::toPathValue($sales_order_without_charge),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet
     *
     * Reads the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType|\BeLenka\SAP\SalesOrderWOCharge\Model\Error
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'][0])
    {
        list($response) = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetWithHttpInfo($sales_order_without_charge, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetWithHttpInfo
     *
     * Reads the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType|\BeLenka\SAP\SalesOrderWOCharge\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetWithHttpInfo($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'][0])
    {
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetRequest($sales_order_without_charge, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetAsync
     *
     * Reads the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetAsync($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'][0])
    {
        return $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetAsyncWithHttpInfo($sales_order_without_charge, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetAsyncWithHttpInfo
     *
     * Reads the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetAsyncWithHttpInfo($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\ASlsOrdWthoutChrgPartnerType';
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetRequest($sales_order_without_charge, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGetRequest($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'][0])
    {

        // verify the required parameter 'sales_order_without_charge' is set
        if ($sales_order_without_charge === null || (is_array($sales_order_without_charge) && count($sales_order_without_charge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_without_charge when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'
            );
        }
        if (strlen($sales_order_without_charge) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_without_charge" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/A_SlsOrdWthoutChrgPartner(SalesOrderWithoutCharge=\'{SalesOrderWithoutCharge}\',PartnerFunction=\'{PartnerFunction}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order_without_charge !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderWithoutCharge' . '}',
                ObjectSerializer::toPathValue($sales_order_without_charge),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch
     *
     * Updates the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  \BeLenka\SAP\SalesOrderWOCharge\Model\ModifiedASlsOrdWthoutChrgPartnerType $modified_a_sls_ord_wthout_chrg_partner_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'][0])
    {
        $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchWithHttpInfo($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, $contentType);
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchWithHttpInfo
     *
     * Updates the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  \BeLenka\SAP\SalesOrderWOCharge\Model\ModifiedASlsOrdWthoutChrgPartnerType $modified_a_sls_ord_wthout_chrg_partner_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchWithHttpInfo($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'][0])
    {
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchRequest($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchAsync
     *
     * Updates the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  \BeLenka\SAP\SalesOrderWOCharge\Model\ModifiedASlsOrdWthoutChrgPartnerType $modified_a_sls_ord_wthout_chrg_partner_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchAsync($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'][0])
    {
        return $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchAsyncWithHttpInfo($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchAsyncWithHttpInfo
     *
     * Updates the header partners of a specific sales order without charge and with a specific partner function.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  \BeLenka\SAP\SalesOrderWOCharge\Model\ModifiedASlsOrdWthoutChrgPartnerType $modified_a_sls_ord_wthout_chrg_partner_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchAsyncWithHttpInfo($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'][0])
    {
        $returnType = '';
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchRequest($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  \BeLenka\SAP\SalesOrderWOCharge\Model\ModifiedASlsOrdWthoutChrgPartnerType $modified_a_sls_ord_wthout_chrg_partner_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatchRequest($sales_order_without_charge, $partner_function, $modified_a_sls_ord_wthout_chrg_partner_type, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'][0])
    {

        // verify the required parameter 'sales_order_without_charge' is set
        if ($sales_order_without_charge === null || (is_array($sales_order_without_charge) && count($sales_order_without_charge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_without_charge when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'
            );
        }
        if (strlen($sales_order_without_charge) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_without_charge" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'modified_a_sls_ord_wthout_chrg_partner_type' is set
        if ($modified_a_sls_ord_wthout_chrg_partner_type === null || (is_array($modified_a_sls_ord_wthout_chrg_partner_type) && count($modified_a_sls_ord_wthout_chrg_partner_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_sls_ord_wthout_chrg_partner_type when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionPatch'
            );
        }


        $resourcePath = '/A_SlsOrdWthoutChrgPartner(SalesOrderWithoutCharge=\'{SalesOrderWithoutCharge}\',PartnerFunction=\'{PartnerFunction}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order_without_charge !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderWithoutCharge' . '}',
                ObjectSerializer::toPathValue($sales_order_without_charge),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_sls_ord_wthout_chrg_partner_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_sls_ord_wthout_chrg_partner_type));
            } else {
                $httpBody = $modified_a_sls_ord_wthout_chrg_partner_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet
     *
     * Reads the sales order without charge header for a specific header partner.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType|\BeLenka\SAP\SalesOrderWOCharge\Model\Error
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'][0])
    {
        list($response) = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetWithHttpInfo($sales_order_without_charge, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetWithHttpInfo
     *
     * Reads the sales order without charge header for a specific header partner.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrderWOCharge\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType|\BeLenka\SAP\SalesOrderWOCharge\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetWithHttpInfo($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'][0])
    {
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetRequest($sales_order_without_charge, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetAsync
     *
     * Reads the sales order without charge header for a specific header partner.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetAsync($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'][0])
    {
        return $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetAsyncWithHttpInfo($sales_order_without_charge, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetAsyncWithHttpInfo
     *
     * Reads the sales order without charge header for a specific header partner.
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetAsyncWithHttpInfo($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrderWOCharge\Model\ASalesOrderWithoutChargeType';
        $request = $this->aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetRequest($sales_order_without_charge, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'
     *
     * @param  string $sales_order_without_charge Sales Order Without Charge (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGetRequest($sales_order_without_charge, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'][0])
    {

        // verify the required parameter 'sales_order_without_charge' is set
        if ($sales_order_without_charge === null || (is_array($sales_order_without_charge) && count($sales_order_without_charge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_without_charge when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'
            );
        }
        if (strlen($sales_order_without_charge) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_without_charge" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling HeaderPartnerApi.aSlsOrdWthoutChrgPartnerSalesOrderWithoutChargeSalesOrderWithoutChargePartnerFunctionPartnerFunctionToSalesOrderWithoutChargeGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/A_SlsOrdWthoutChrgPartner(SalesOrderWithoutCharge=\'{SalesOrderWithoutCharge}\',PartnerFunction=\'{PartnerFunction}\')/to_SalesOrderWithoutCharge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order_without_charge !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderWithoutCharge' . '}',
                ObjectSerializer::toPathValue($sales_order_without_charge),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
