<?php
/**
 * APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrderWOCharge
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order Without Charge (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders without charge or only parts of the data, using the provided filters.   - You can create sales orders without charge. Note that you must use “deep insert” requests (a header plus the following entities: header partner, item and item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can create new items. Note that you must use “deep insert” requests (with the entity: item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can update the header, header partner, item and item partner.   - For existing sales orders without charge, you can delete the header, header partner, item and item partner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrderWOCharge\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrderWOCharge\ObjectSerializer;

/**
 * APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrderWOCharge
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_WITHOUT_CHARGE_SRV.A_SalesOrderWithoutChargeType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_order_without_charge' => 'string',
        'sales_order_without_charge_type' => 'string',
        'sales_organization' => 'string',
        'distribution_channel' => 'string',
        'organization_division' => 'string',
        'sales_group' => 'string',
        'sales_office' => 'string',
        'sales_district' => 'string',
        'sold_to_party' => 'string',
        'creation_date' => 'string',
        'created_by_user' => 'string',
        'last_change_date' => 'string',
        'last_change_date_time' => 'string',
        'purchase_order_by_customer' => 'string',
        'customer_purchase_order_type' => 'string',
        'customer_purchase_order_date' => 'string',
        'sales_order_without_charge_date' => 'string',
        'total_net_amount' => 'float',
        'transaction_currency' => 'string',
        'sd_document_reason' => 'string',
        'requested_delivery_date' => 'string',
        'delivery_date_type_rule' => 'string',
        'shipping_condition' => 'string',
        'complete_delivery_is_defined' => 'bool',
        'shipping_type' => 'string',
        'delivery_block_reason' => 'string',
        'header_billing_block_reason' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'incoterms_version' => 'string',
        'cost_center' => 'string',
        'reference_sd_document' => 'string',
        'accounting_doc_external_reference' => 'string',
        'reference_sd_document_category' => 'string',
        'overall_sd_process_status' => 'string',
        'overall_total_delivery_status' => 'string',
        'overall_sd_document_rejection_sts' => 'string',
        'to_item' => '\BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToItem',
        'to_partner' => '\BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToPartner',
        'to_text' => '\BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_order_without_charge' => null,
        'sales_order_without_charge_type' => null,
        'sales_organization' => null,
        'distribution_channel' => null,
        'organization_division' => null,
        'sales_group' => null,
        'sales_office' => null,
        'sales_district' => null,
        'sold_to_party' => null,
        'creation_date' => null,
        'created_by_user' => null,
        'last_change_date' => null,
        'last_change_date_time' => null,
        'purchase_order_by_customer' => null,
        'customer_purchase_order_type' => null,
        'customer_purchase_order_date' => null,
        'sales_order_without_charge_date' => null,
        'total_net_amount' => 'decimal',
        'transaction_currency' => null,
        'sd_document_reason' => null,
        'requested_delivery_date' => null,
        'delivery_date_type_rule' => null,
        'shipping_condition' => null,
        'complete_delivery_is_defined' => null,
        'shipping_type' => null,
        'delivery_block_reason' => null,
        'header_billing_block_reason' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'incoterms_version' => null,
        'cost_center' => null,
        'reference_sd_document' => null,
        'accounting_doc_external_reference' => null,
        'reference_sd_document_category' => null,
        'overall_sd_process_status' => null,
        'overall_total_delivery_status' => null,
        'overall_sd_document_rejection_sts' => null,
        'to_item' => null,
        'to_partner' => null,
        'to_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sales_order_without_charge' => false,
		'sales_order_without_charge_type' => true,
		'sales_organization' => true,
		'distribution_channel' => true,
		'organization_division' => true,
		'sales_group' => true,
		'sales_office' => true,
		'sales_district' => true,
		'sold_to_party' => true,
		'creation_date' => true,
		'created_by_user' => true,
		'last_change_date' => true,
		'last_change_date_time' => true,
		'purchase_order_by_customer' => true,
		'customer_purchase_order_type' => true,
		'customer_purchase_order_date' => true,
		'sales_order_without_charge_date' => true,
		'total_net_amount' => true,
		'transaction_currency' => true,
		'sd_document_reason' => true,
		'requested_delivery_date' => true,
		'delivery_date_type_rule' => true,
		'shipping_condition' => true,
		'complete_delivery_is_defined' => true,
		'shipping_type' => true,
		'delivery_block_reason' => true,
		'header_billing_block_reason' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'incoterms_version' => true,
		'cost_center' => true,
		'reference_sd_document' => true,
		'accounting_doc_external_reference' => true,
		'reference_sd_document_category' => true,
		'overall_sd_process_status' => true,
		'overall_total_delivery_status' => true,
		'overall_sd_document_rejection_sts' => true,
		'to_item' => false,
		'to_partner' => false,
		'to_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_order_without_charge' => 'SalesOrderWithoutCharge',
        'sales_order_without_charge_type' => 'SalesOrderWithoutChargeType',
        'sales_organization' => 'SalesOrganization',
        'distribution_channel' => 'DistributionChannel',
        'organization_division' => 'OrganizationDivision',
        'sales_group' => 'SalesGroup',
        'sales_office' => 'SalesOffice',
        'sales_district' => 'SalesDistrict',
        'sold_to_party' => 'SoldToParty',
        'creation_date' => 'CreationDate',
        'created_by_user' => 'CreatedByUser',
        'last_change_date' => 'LastChangeDate',
        'last_change_date_time' => 'LastChangeDateTime',
        'purchase_order_by_customer' => 'PurchaseOrderByCustomer',
        'customer_purchase_order_type' => 'CustomerPurchaseOrderType',
        'customer_purchase_order_date' => 'CustomerPurchaseOrderDate',
        'sales_order_without_charge_date' => 'SalesOrderWithoutChargeDate',
        'total_net_amount' => 'TotalNetAmount',
        'transaction_currency' => 'TransactionCurrency',
        'sd_document_reason' => 'SDDocumentReason',
        'requested_delivery_date' => 'RequestedDeliveryDate',
        'delivery_date_type_rule' => 'DeliveryDateTypeRule',
        'shipping_condition' => 'ShippingCondition',
        'complete_delivery_is_defined' => 'CompleteDeliveryIsDefined',
        'shipping_type' => 'ShippingType',
        'delivery_block_reason' => 'DeliveryBlockReason',
        'header_billing_block_reason' => 'HeaderBillingBlockReason',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'incoterms_version' => 'IncotermsVersion',
        'cost_center' => 'CostCenter',
        'reference_sd_document' => 'ReferenceSDDocument',
        'accounting_doc_external_reference' => 'AccountingDocExternalReference',
        'reference_sd_document_category' => 'ReferenceSDDocumentCategory',
        'overall_sd_process_status' => 'OverallSDProcessStatus',
        'overall_total_delivery_status' => 'OverallTotalDeliveryStatus',
        'overall_sd_document_rejection_sts' => 'OverallSDDocumentRejectionSts',
        'to_item' => 'to_Item',
        'to_partner' => 'to_Partner',
        'to_text' => 'to_Text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_order_without_charge' => 'setSalesOrderWithoutCharge',
        'sales_order_without_charge_type' => 'setSalesOrderWithoutChargeType',
        'sales_organization' => 'setSalesOrganization',
        'distribution_channel' => 'setDistributionChannel',
        'organization_division' => 'setOrganizationDivision',
        'sales_group' => 'setSalesGroup',
        'sales_office' => 'setSalesOffice',
        'sales_district' => 'setSalesDistrict',
        'sold_to_party' => 'setSoldToParty',
        'creation_date' => 'setCreationDate',
        'created_by_user' => 'setCreatedByUser',
        'last_change_date' => 'setLastChangeDate',
        'last_change_date_time' => 'setLastChangeDateTime',
        'purchase_order_by_customer' => 'setPurchaseOrderByCustomer',
        'customer_purchase_order_type' => 'setCustomerPurchaseOrderType',
        'customer_purchase_order_date' => 'setCustomerPurchaseOrderDate',
        'sales_order_without_charge_date' => 'setSalesOrderWithoutChargeDate',
        'total_net_amount' => 'setTotalNetAmount',
        'transaction_currency' => 'setTransactionCurrency',
        'sd_document_reason' => 'setSdDocumentReason',
        'requested_delivery_date' => 'setRequestedDeliveryDate',
        'delivery_date_type_rule' => 'setDeliveryDateTypeRule',
        'shipping_condition' => 'setShippingCondition',
        'complete_delivery_is_defined' => 'setCompleteDeliveryIsDefined',
        'shipping_type' => 'setShippingType',
        'delivery_block_reason' => 'setDeliveryBlockReason',
        'header_billing_block_reason' => 'setHeaderBillingBlockReason',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'incoterms_version' => 'setIncotermsVersion',
        'cost_center' => 'setCostCenter',
        'reference_sd_document' => 'setReferenceSdDocument',
        'accounting_doc_external_reference' => 'setAccountingDocExternalReference',
        'reference_sd_document_category' => 'setReferenceSdDocumentCategory',
        'overall_sd_process_status' => 'setOverallSdProcessStatus',
        'overall_total_delivery_status' => 'setOverallTotalDeliveryStatus',
        'overall_sd_document_rejection_sts' => 'setOverallSdDocumentRejectionSts',
        'to_item' => 'setToItem',
        'to_partner' => 'setToPartner',
        'to_text' => 'setToText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_order_without_charge' => 'getSalesOrderWithoutCharge',
        'sales_order_without_charge_type' => 'getSalesOrderWithoutChargeType',
        'sales_organization' => 'getSalesOrganization',
        'distribution_channel' => 'getDistributionChannel',
        'organization_division' => 'getOrganizationDivision',
        'sales_group' => 'getSalesGroup',
        'sales_office' => 'getSalesOffice',
        'sales_district' => 'getSalesDistrict',
        'sold_to_party' => 'getSoldToParty',
        'creation_date' => 'getCreationDate',
        'created_by_user' => 'getCreatedByUser',
        'last_change_date' => 'getLastChangeDate',
        'last_change_date_time' => 'getLastChangeDateTime',
        'purchase_order_by_customer' => 'getPurchaseOrderByCustomer',
        'customer_purchase_order_type' => 'getCustomerPurchaseOrderType',
        'customer_purchase_order_date' => 'getCustomerPurchaseOrderDate',
        'sales_order_without_charge_date' => 'getSalesOrderWithoutChargeDate',
        'total_net_amount' => 'getTotalNetAmount',
        'transaction_currency' => 'getTransactionCurrency',
        'sd_document_reason' => 'getSdDocumentReason',
        'requested_delivery_date' => 'getRequestedDeliveryDate',
        'delivery_date_type_rule' => 'getDeliveryDateTypeRule',
        'shipping_condition' => 'getShippingCondition',
        'complete_delivery_is_defined' => 'getCompleteDeliveryIsDefined',
        'shipping_type' => 'getShippingType',
        'delivery_block_reason' => 'getDeliveryBlockReason',
        'header_billing_block_reason' => 'getHeaderBillingBlockReason',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'incoterms_version' => 'getIncotermsVersion',
        'cost_center' => 'getCostCenter',
        'reference_sd_document' => 'getReferenceSdDocument',
        'accounting_doc_external_reference' => 'getAccountingDocExternalReference',
        'reference_sd_document_category' => 'getReferenceSdDocumentCategory',
        'overall_sd_process_status' => 'getOverallSdProcessStatus',
        'overall_total_delivery_status' => 'getOverallTotalDeliveryStatus',
        'overall_sd_document_rejection_sts' => 'getOverallSdDocumentRejectionSts',
        'to_item' => 'getToItem',
        'to_partner' => 'getToPartner',
        'to_text' => 'getToText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sales_order_without_charge', $data ?? [], null);
        $this->setIfExists('sales_order_without_charge_type', $data ?? [], null);
        $this->setIfExists('sales_organization', $data ?? [], null);
        $this->setIfExists('distribution_channel', $data ?? [], null);
        $this->setIfExists('organization_division', $data ?? [], null);
        $this->setIfExists('sales_group', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('sales_district', $data ?? [], null);
        $this->setIfExists('sold_to_party', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('last_change_date', $data ?? [], null);
        $this->setIfExists('last_change_date_time', $data ?? [], null);
        $this->setIfExists('purchase_order_by_customer', $data ?? [], null);
        $this->setIfExists('customer_purchase_order_type', $data ?? [], null);
        $this->setIfExists('customer_purchase_order_date', $data ?? [], null);
        $this->setIfExists('sales_order_without_charge_date', $data ?? [], null);
        $this->setIfExists('total_net_amount', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('sd_document_reason', $data ?? [], null);
        $this->setIfExists('requested_delivery_date', $data ?? [], null);
        $this->setIfExists('delivery_date_type_rule', $data ?? [], null);
        $this->setIfExists('shipping_condition', $data ?? [], null);
        $this->setIfExists('complete_delivery_is_defined', $data ?? [], null);
        $this->setIfExists('shipping_type', $data ?? [], null);
        $this->setIfExists('delivery_block_reason', $data ?? [], null);
        $this->setIfExists('header_billing_block_reason', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('incoterms_version', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('accounting_doc_external_reference', $data ?? [], null);
        $this->setIfExists('reference_sd_document_category', $data ?? [], null);
        $this->setIfExists('overall_sd_process_status', $data ?? [], null);
        $this->setIfExists('overall_total_delivery_status', $data ?? [], null);
        $this->setIfExists('overall_sd_document_rejection_sts', $data ?? [], null);
        $this->setIfExists('to_item', $data ?? [], null);
        $this->setIfExists('to_partner', $data ?? [], null);
        $this->setIfExists('to_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sales_order_without_charge']) && (mb_strlen($this->container['sales_order_without_charge']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_order_without_charge', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order_without_charge_type']) && (mb_strlen($this->container['sales_order_without_charge_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_without_charge_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_organization']) && (mb_strlen($this->container['sales_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['distribution_channel']) && (mb_strlen($this->container['distribution_channel']) > 2)) {
            $invalidProperties[] = "invalid value for 'distribution_channel', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['organization_division']) && (mb_strlen($this->container['organization_division']) > 2)) {
            $invalidProperties[] = "invalid value for 'organization_division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_group']) && (mb_strlen($this->container['sales_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'sales_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_district']) && (mb_strlen($this->container['sales_district']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_district', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sold_to_party']) && (mb_strlen($this->container['sold_to_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'sold_to_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['purchase_order_by_customer']) && (mb_strlen($this->container['purchase_order_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['customer_purchase_order_type']) && (mb_strlen($this->container['customer_purchase_order_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_purchase_order_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['sd_document_reason']) && (mb_strlen($this->container['sd_document_reason']) > 3)) {
            $invalidProperties[] = "invalid value for 'sd_document_reason', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['delivery_date_type_rule']) && (mb_strlen($this->container['delivery_date_type_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'delivery_date_type_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['shipping_condition']) && (mb_strlen($this->container['shipping_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipping_type']) && (mb_strlen($this->container['shipping_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_block_reason']) && (mb_strlen($this->container['delivery_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['header_billing_block_reason']) && (mb_strlen($this->container['header_billing_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'header_billing_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_version']) && (mb_strlen($this->container['incoterms_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'incoterms_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['accounting_doc_external_reference']) && (mb_strlen($this->container['accounting_doc_external_reference']) > 16)) {
            $invalidProperties[] = "invalid value for 'accounting_doc_external_reference', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['reference_sd_document_category']) && (mb_strlen($this->container['reference_sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['overall_sd_process_status']) && (mb_strlen($this->container['overall_sd_process_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_sd_process_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_total_delivery_status']) && (mb_strlen($this->container['overall_total_delivery_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_total_delivery_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_sd_document_rejection_sts']) && (mb_strlen($this->container['overall_sd_document_rejection_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_sd_document_rejection_sts', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_order_without_charge
     *
     * @return string|null
     */
    public function getSalesOrderWithoutCharge()
    {
        return $this->container['sales_order_without_charge'];
    }

    /**
     * Sets sales_order_without_charge
     *
     * @param string|null $sales_order_without_charge sales_order_without_charge
     *
     * @return self
     */
    public function setSalesOrderWithoutCharge($sales_order_without_charge)
    {
        if (is_null($sales_order_without_charge)) {
            throw new \InvalidArgumentException('non-nullable sales_order_without_charge cannot be null');
        }
        if ((mb_strlen($sales_order_without_charge) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_without_charge when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 10.');
        }

        $this->container['sales_order_without_charge'] = $sales_order_without_charge;

        return $this;
    }

    /**
     * Gets sales_order_without_charge_type
     *
     * @return string|null
     */
    public function getSalesOrderWithoutChargeType()
    {
        return $this->container['sales_order_without_charge_type'];
    }

    /**
     * Sets sales_order_without_charge_type
     *
     * @param string|null $sales_order_without_charge_type sales_order_without_charge_type
     *
     * @return self
     */
    public function setSalesOrderWithoutChargeType($sales_order_without_charge_type)
    {
        if (is_null($sales_order_without_charge_type)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_without_charge_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_without_charge_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_without_charge_type) && (mb_strlen($sales_order_without_charge_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_without_charge_type when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_without_charge_type'] = $sales_order_without_charge_type;

        return $this;
    }

    /**
     * Gets sales_organization
     *
     * @return string|null
     */
    public function getSalesOrganization()
    {
        return $this->container['sales_organization'];
    }

    /**
     * Sets sales_organization
     *
     * @param string|null $sales_organization sales_organization
     *
     * @return self
     */
    public function setSalesOrganization($sales_organization)
    {
        if (is_null($sales_organization)) {
            array_push($this->openAPINullablesSetToNull, 'sales_organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_organization) && (mb_strlen($sales_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_organization when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 4.');
        }

        $this->container['sales_organization'] = $sales_organization;

        return $this;
    }

    /**
     * Gets distribution_channel
     *
     * @return string|null
     */
    public function getDistributionChannel()
    {
        return $this->container['distribution_channel'];
    }

    /**
     * Sets distribution_channel
     *
     * @param string|null $distribution_channel distribution_channel
     *
     * @return self
     */
    public function setDistributionChannel($distribution_channel)
    {
        if (is_null($distribution_channel)) {
            array_push($this->openAPINullablesSetToNull, 'distribution_channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distribution_channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($distribution_channel) && (mb_strlen($distribution_channel) > 2)) {
            throw new \InvalidArgumentException('invalid length for $distribution_channel when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 2.');
        }

        $this->container['distribution_channel'] = $distribution_channel;

        return $this;
    }

    /**
     * Gets organization_division
     *
     * @return string|null
     */
    public function getOrganizationDivision()
    {
        return $this->container['organization_division'];
    }

    /**
     * Sets organization_division
     *
     * @param string|null $organization_division organization_division
     *
     * @return self
     */
    public function setOrganizationDivision($organization_division)
    {
        if (is_null($organization_division)) {
            array_push($this->openAPINullablesSetToNull, 'organization_division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_division) && (mb_strlen($organization_division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $organization_division when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 2.');
        }

        $this->container['organization_division'] = $organization_division;

        return $this;
    }

    /**
     * Gets sales_group
     *
     * @return string|null
     */
    public function getSalesGroup()
    {
        return $this->container['sales_group'];
    }

    /**
     * Sets sales_group
     *
     * @param string|null $sales_group sales_group
     *
     * @return self
     */
    public function setSalesGroup($sales_group)
    {
        if (is_null($sales_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_group) && (mb_strlen($sales_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sales_group when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 3.');
        }

        $this->container['sales_group'] = $sales_group;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            array_push($this->openAPINullablesSetToNull, 'sales_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_office) && (mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets sales_district
     *
     * @return string|null
     */
    public function getSalesDistrict()
    {
        return $this->container['sales_district'];
    }

    /**
     * Sets sales_district
     *
     * @param string|null $sales_district sales_district
     *
     * @return self
     */
    public function setSalesDistrict($sales_district)
    {
        if (is_null($sales_district)) {
            array_push($this->openAPINullablesSetToNull, 'sales_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_district) && (mb_strlen($sales_district) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_district when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 6.');
        }

        $this->container['sales_district'] = $sales_district;

        return $this;
    }

    /**
     * Gets sold_to_party
     *
     * @return string|null
     */
    public function getSoldToParty()
    {
        return $this->container['sold_to_party'];
    }

    /**
     * Sets sold_to_party
     *
     * @param string|null $sold_to_party sold_to_party
     *
     * @return self
     */
    public function setSoldToParty($sold_to_party)
    {
        if (is_null($sold_to_party)) {
            array_push($this->openAPINullablesSetToNull, 'sold_to_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sold_to_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sold_to_party) && (mb_strlen($sold_to_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sold_to_party when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 10.');
        }

        $this->container['sold_to_party'] = $sold_to_party;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date Record Creation Date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user Name of Person Responsible for Creating the Object
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($created_by_user) && (mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets last_change_date
     *
     * @return string|null
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param string|null $last_change_date Last Changed On
     *
     * @return self
     */
    public function setLastChangeDate($last_change_date)
    {
        if (is_null($last_change_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets last_change_date_time
     *
     * @return string|null
     */
    public function getLastChangeDateTime()
    {
        return $this->container['last_change_date_time'];
    }

    /**
     * Sets last_change_date_time
     *
     * @param string|null $last_change_date_time last_change_date_time
     *
     * @return self
     */
    public function setLastChangeDateTime($last_change_date_time)
    {
        if (is_null($last_change_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date_time'] = $last_change_date_time;

        return $this;
    }

    /**
     * Gets purchase_order_by_customer
     *
     * @return string|null
     */
    public function getPurchaseOrderByCustomer()
    {
        return $this->container['purchase_order_by_customer'];
    }

    /**
     * Sets purchase_order_by_customer
     *
     * @param string|null $purchase_order_by_customer purchase_order_by_customer
     *
     * @return self
     */
    public function setPurchaseOrderByCustomer($purchase_order_by_customer)
    {
        if (is_null($purchase_order_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_customer) && (mb_strlen($purchase_order_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_customer when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_customer'] = $purchase_order_by_customer;

        return $this;
    }

    /**
     * Gets customer_purchase_order_type
     *
     * @return string|null
     */
    public function getCustomerPurchaseOrderType()
    {
        return $this->container['customer_purchase_order_type'];
    }

    /**
     * Sets customer_purchase_order_type
     *
     * @param string|null $customer_purchase_order_type Customer Purchase Order Type
     *
     * @return self
     */
    public function setCustomerPurchaseOrderType($customer_purchase_order_type)
    {
        if (is_null($customer_purchase_order_type)) {
            array_push($this->openAPINullablesSetToNull, 'customer_purchase_order_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_purchase_order_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_purchase_order_type) && (mb_strlen($customer_purchase_order_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_purchase_order_type when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 4.');
        }

        $this->container['customer_purchase_order_type'] = $customer_purchase_order_type;

        return $this;
    }

    /**
     * Gets customer_purchase_order_date
     *
     * @return string|null
     */
    public function getCustomerPurchaseOrderDate()
    {
        return $this->container['customer_purchase_order_date'];
    }

    /**
     * Sets customer_purchase_order_date
     *
     * @param string|null $customer_purchase_order_date customer_purchase_order_date
     *
     * @return self
     */
    public function setCustomerPurchaseOrderDate($customer_purchase_order_date)
    {
        if (is_null($customer_purchase_order_date)) {
            array_push($this->openAPINullablesSetToNull, 'customer_purchase_order_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_purchase_order_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_purchase_order_date'] = $customer_purchase_order_date;

        return $this;
    }

    /**
     * Gets sales_order_without_charge_date
     *
     * @return string|null
     */
    public function getSalesOrderWithoutChargeDate()
    {
        return $this->container['sales_order_without_charge_date'];
    }

    /**
     * Sets sales_order_without_charge_date
     *
     * @param string|null $sales_order_without_charge_date Document Date (Date Received/Sent)
     *
     * @return self
     */
    public function setSalesOrderWithoutChargeDate($sales_order_without_charge_date)
    {
        if (is_null($sales_order_without_charge_date)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_without_charge_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_without_charge_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_order_without_charge_date'] = $sales_order_without_charge_date;

        return $this;
    }

    /**
     * Gets total_net_amount
     *
     * @return float|null
     */
    public function getTotalNetAmount()
    {
        return $this->container['total_net_amount'];
    }

    /**
     * Sets total_net_amount
     *
     * @param float|null $total_net_amount Net Value of the Sales Document in Document Currency
     *
     * @return self
     */
    public function setTotalNetAmount($total_net_amount)
    {
        if (is_null($total_net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['total_net_amount'] = $total_net_amount;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_currency) && (mb_strlen($transaction_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 5.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets sd_document_reason
     *
     * @return string|null
     */
    public function getSdDocumentReason()
    {
        return $this->container['sd_document_reason'];
    }

    /**
     * Sets sd_document_reason
     *
     * @param string|null $sd_document_reason Order Reason (Reason for the Business Transaction)
     *
     * @return self
     */
    public function setSdDocumentReason($sd_document_reason)
    {
        if (is_null($sd_document_reason)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document_reason) && (mb_strlen($sd_document_reason) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_reason when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 3.');
        }

        $this->container['sd_document_reason'] = $sd_document_reason;

        return $this;
    }

    /**
     * Gets requested_delivery_date
     *
     * @return string|null
     */
    public function getRequestedDeliveryDate()
    {
        return $this->container['requested_delivery_date'];
    }

    /**
     * Sets requested_delivery_date
     *
     * @param string|null $requested_delivery_date requested_delivery_date
     *
     * @return self
     */
    public function setRequestedDeliveryDate($requested_delivery_date)
    {
        if (is_null($requested_delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'requested_delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requested_delivery_date'] = $requested_delivery_date;

        return $this;
    }

    /**
     * Gets delivery_date_type_rule
     *
     * @return string|null
     */
    public function getDeliveryDateTypeRule()
    {
        return $this->container['delivery_date_type_rule'];
    }

    /**
     * Sets delivery_date_type_rule
     *
     * @param string|null $delivery_date_type_rule delivery_date_type_rule
     *
     * @return self
     */
    public function setDeliveryDateTypeRule($delivery_date_type_rule)
    {
        if (is_null($delivery_date_type_rule)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date_type_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date_type_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_date_type_rule) && (mb_strlen($delivery_date_type_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $delivery_date_type_rule when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 1.');
        }

        $this->container['delivery_date_type_rule'] = $delivery_date_type_rule;

        return $this;
    }

    /**
     * Gets shipping_condition
     *
     * @return string|null
     */
    public function getShippingCondition()
    {
        return $this->container['shipping_condition'];
    }

    /**
     * Sets shipping_condition
     *
     * @param string|null $shipping_condition shipping_condition
     *
     * @return self
     */
    public function setShippingCondition($shipping_condition)
    {
        if (is_null($shipping_condition)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_condition) && (mb_strlen($shipping_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_condition when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_condition'] = $shipping_condition;

        return $this;
    }

    /**
     * Gets complete_delivery_is_defined
     *
     * @return bool|null
     */
    public function getCompleteDeliveryIsDefined()
    {
        return $this->container['complete_delivery_is_defined'];
    }

    /**
     * Sets complete_delivery_is_defined
     *
     * @param bool|null $complete_delivery_is_defined Complete Delivery Defined for Each Sales Order
     *
     * @return self
     */
    public function setCompleteDeliveryIsDefined($complete_delivery_is_defined)
    {
        if (is_null($complete_delivery_is_defined)) {
            array_push($this->openAPINullablesSetToNull, 'complete_delivery_is_defined');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complete_delivery_is_defined', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complete_delivery_is_defined'] = $complete_delivery_is_defined;

        return $this;
    }

    /**
     * Gets shipping_type
     *
     * @return string|null
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     *
     * @param string|null $shipping_type shipping_type
     *
     * @return self
     */
    public function setShippingType($shipping_type)
    {
        if (is_null($shipping_type)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_type) && (mb_strlen($shipping_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_type when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets delivery_block_reason
     *
     * @return string|null
     */
    public function getDeliveryBlockReason()
    {
        return $this->container['delivery_block_reason'];
    }

    /**
     * Sets delivery_block_reason
     *
     * @param string|null $delivery_block_reason Delivery Block (Document Header)
     *
     * @return self
     */
    public function setDeliveryBlockReason($delivery_block_reason)
    {
        if (is_null($delivery_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_block_reason) && (mb_strlen($delivery_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_block_reason when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 2.');
        }

        $this->container['delivery_block_reason'] = $delivery_block_reason;

        return $this;
    }

    /**
     * Gets header_billing_block_reason
     *
     * @return string|null
     */
    public function getHeaderBillingBlockReason()
    {
        return $this->container['header_billing_block_reason'];
    }

    /**
     * Sets header_billing_block_reason
     *
     * @param string|null $header_billing_block_reason Billing Block in SD Document
     *
     * @return self
     */
    public function setHeaderBillingBlockReason($header_billing_block_reason)
    {
        if (is_null($header_billing_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'header_billing_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_billing_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_billing_block_reason) && (mb_strlen($header_billing_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $header_billing_block_reason when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 2.');
        }

        $this->container['header_billing_block_reason'] = $header_billing_block_reason;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets incoterms_version
     *
     * @return string|null
     */
    public function getIncotermsVersion()
    {
        return $this->container['incoterms_version'];
    }

    /**
     * Sets incoterms_version
     *
     * @param string|null $incoterms_version incoterms_version
     *
     * @return self
     */
    public function setIncotermsVersion($incoterms_version)
    {
        if (is_null($incoterms_version)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_version) && (mb_strlen($incoterms_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_version when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 4.');
        }

        $this->container['incoterms_version'] = $incoterms_version;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            array_push($this->openAPINullablesSetToNull, 'cost_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cost_center) && (mb_strlen($cost_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 10.');
        }

        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document Document Number of Reference Document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets accounting_doc_external_reference
     *
     * @return string|null
     */
    public function getAccountingDocExternalReference()
    {
        return $this->container['accounting_doc_external_reference'];
    }

    /**
     * Sets accounting_doc_external_reference
     *
     * @param string|null $accounting_doc_external_reference Reference Document Number
     *
     * @return self
     */
    public function setAccountingDocExternalReference($accounting_doc_external_reference)
    {
        if (is_null($accounting_doc_external_reference)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_doc_external_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_doc_external_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_doc_external_reference) && (mb_strlen($accounting_doc_external_reference) > 16)) {
            throw new \InvalidArgumentException('invalid length for $accounting_doc_external_reference when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 16.');
        }

        $this->container['accounting_doc_external_reference'] = $accounting_doc_external_reference;

        return $this;
    }

    /**
     * Gets reference_sd_document_category
     *
     * @return string|null
     */
    public function getReferenceSdDocumentCategory()
    {
        return $this->container['reference_sd_document_category'];
    }

    /**
     * Sets reference_sd_document_category
     *
     * @param string|null $reference_sd_document_category reference_sd_document_category
     *
     * @return self
     */
    public function setReferenceSdDocumentCategory($reference_sd_document_category)
    {
        if (is_null($reference_sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_category) && (mb_strlen($reference_sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_category when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 4.');
        }

        $this->container['reference_sd_document_category'] = $reference_sd_document_category;

        return $this;
    }

    /**
     * Gets overall_sd_process_status
     *
     * @return string|null
     */
    public function getOverallSdProcessStatus()
    {
        return $this->container['overall_sd_process_status'];
    }

    /**
     * Sets overall_sd_process_status
     *
     * @param string|null $overall_sd_process_status Overall Processing Status (Header/All Items)
     *
     * @return self
     */
    public function setOverallSdProcessStatus($overall_sd_process_status)
    {
        if (is_null($overall_sd_process_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_sd_process_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_sd_process_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_sd_process_status) && (mb_strlen($overall_sd_process_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_sd_process_status when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 1.');
        }

        $this->container['overall_sd_process_status'] = $overall_sd_process_status;

        return $this;
    }

    /**
     * Gets overall_total_delivery_status
     *
     * @return string|null
     */
    public function getOverallTotalDeliveryStatus()
    {
        return $this->container['overall_total_delivery_status'];
    }

    /**
     * Sets overall_total_delivery_status
     *
     * @param string|null $overall_total_delivery_status Overall Delivery Status (All Items)
     *
     * @return self
     */
    public function setOverallTotalDeliveryStatus($overall_total_delivery_status)
    {
        if (is_null($overall_total_delivery_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_total_delivery_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_total_delivery_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_total_delivery_status) && (mb_strlen($overall_total_delivery_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_total_delivery_status when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 1.');
        }

        $this->container['overall_total_delivery_status'] = $overall_total_delivery_status;

        return $this;
    }

    /**
     * Gets overall_sd_document_rejection_sts
     *
     * @return string|null
     */
    public function getOverallSdDocumentRejectionSts()
    {
        return $this->container['overall_sd_document_rejection_sts'];
    }

    /**
     * Sets overall_sd_document_rejection_sts
     *
     * @param string|null $overall_sd_document_rejection_sts Rejection Status (All Items)
     *
     * @return self
     */
    public function setOverallSdDocumentRejectionSts($overall_sd_document_rejection_sts)
    {
        if (is_null($overall_sd_document_rejection_sts)) {
            array_push($this->openAPINullablesSetToNull, 'overall_sd_document_rejection_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_sd_document_rejection_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_sd_document_rejection_sts) && (mb_strlen($overall_sd_document_rejection_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_sd_document_rejection_sts when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeType., must be smaller than or equal to 1.');
        }

        $this->container['overall_sd_document_rejection_sts'] = $overall_sd_document_rejection_sts;

        return $this;
    }

    /**
     * Gets to_item
     *
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToItem|null
     */
    public function getToItem()
    {
        return $this->container['to_item'];
    }

    /**
     * Sets to_item
     *
     * @param \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToItem|null $to_item to_item
     *
     * @return self
     */
    public function setToItem($to_item)
    {
        if (is_null($to_item)) {
            throw new \InvalidArgumentException('non-nullable to_item cannot be null');
        }
        $this->container['to_item'] = $to_item;

        return $this;
    }

    /**
     * Gets to_partner
     *
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToPartner|null
     */
    public function getToPartner()
    {
        return $this->container['to_partner'];
    }

    /**
     * Sets to_partner
     *
     * @param \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToPartner|null $to_partner to_partner
     *
     * @return self
     */
    public function setToPartner($to_partner)
    {
        if (is_null($to_partner)) {
            throw new \InvalidArgumentException('non-nullable to_partner cannot be null');
        }
        $this->container['to_partner'] = $to_partner;

        return $this;
    }

    /**
     * Gets to_text
     *
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToText|null
     */
    public function getToText()
    {
        return $this->container['to_text'];
    }

    /**
     * Sets to_text
     *
     * @param \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeToText|null $to_text to_text
     *
     * @return self
     */
    public function setToText($to_text)
    {
        if (is_null($to_text)) {
            throw new \InvalidArgumentException('non-nullable to_text cannot be null');
        }
        $this->container['to_text'] = $to_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


