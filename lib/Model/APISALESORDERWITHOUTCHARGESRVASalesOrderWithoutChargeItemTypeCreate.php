<?php
/**
 * APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrderWOCharge
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order Without Charge (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders without charge or only parts of the data, using the provided filters.   - You can create sales orders without charge. Note that you must use “deep insert” requests (a header plus the following entities: header partner, item and item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can create new items. Note that you must use “deep insert” requests (with the entity: item partner). You cannot create entities without including any related entities.   - For existing sales orders without charge, you can update the header, header partner, item and item partner.   - For existing sales orders without charge, you can delete the header, header partner, item and item partner.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrderWOCharge\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrderWOCharge\ObjectSerializer;

/**
 * APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrderWOCharge
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_WITHOUT_CHARGE_SRV.A_SalesOrderWithoutChargeItemType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_order_without_charge_item' => 'string',
        'higher_level_item' => 'string',
        'sls_ord_wthout_chrg_item_category' => 'string',
        'sales_order_wthout_chrg_item_text' => 'string',
        'purchase_order_by_customer' => 'string',
        'material' => 'string',
        'material_by_customer' => 'string',
        'requested_quantity' => 'float',
        'requested_quantity_unit' => 'string',
        'requested_quantity_sap_unit' => 'string',
        'requested_quantity_iso_unit' => 'string',
        'item_weight_sap_unit' => 'string',
        'item_weight_iso_unit' => 'string',
        'item_volume_sap_unit' => 'string',
        'item_volume_iso_unit' => 'string',
        'material_group' => 'string',
        'material_pricing_group' => 'string',
        'batch' => 'string',
        'plant' => 'string',
        'storage_location' => 'string',
        'shipping_point' => 'string',
        'shipping_type' => 'string',
        'delivery_priority' => 'string',
        'delivery_date_type_rule' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'sales_document_rjcn_reason' => 'string',
        'wbs_element' => 'string',
        'profit_center' => 'string',
        'reference_sd_document' => 'string',
        'reference_sd_document_item' => 'string',
        'to_partner' => '\BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToPartner',
        'to_sales_order_without_charge' => '\BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeCreate',
        'to_schedule_line' => '\BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToScheduleLine',
        'to_text' => '\BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_order_without_charge_item' => null,
        'higher_level_item' => null,
        'sls_ord_wthout_chrg_item_category' => null,
        'sales_order_wthout_chrg_item_text' => null,
        'purchase_order_by_customer' => null,
        'material' => null,
        'material_by_customer' => null,
        'requested_quantity' => 'decimal',
        'requested_quantity_unit' => null,
        'requested_quantity_sap_unit' => null,
        'requested_quantity_iso_unit' => null,
        'item_weight_sap_unit' => null,
        'item_weight_iso_unit' => null,
        'item_volume_sap_unit' => null,
        'item_volume_iso_unit' => null,
        'material_group' => null,
        'material_pricing_group' => null,
        'batch' => null,
        'plant' => null,
        'storage_location' => null,
        'shipping_point' => null,
        'shipping_type' => null,
        'delivery_priority' => null,
        'delivery_date_type_rule' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'sales_document_rjcn_reason' => null,
        'wbs_element' => null,
        'profit_center' => null,
        'reference_sd_document' => null,
        'reference_sd_document_item' => null,
        'to_partner' => null,
        'to_sales_order_without_charge' => null,
        'to_schedule_line' => null,
        'to_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sales_order_without_charge_item' => false,
		'higher_level_item' => true,
		'sls_ord_wthout_chrg_item_category' => true,
		'sales_order_wthout_chrg_item_text' => true,
		'purchase_order_by_customer' => true,
		'material' => true,
		'material_by_customer' => true,
		'requested_quantity' => true,
		'requested_quantity_unit' => true,
		'requested_quantity_sap_unit' => true,
		'requested_quantity_iso_unit' => true,
		'item_weight_sap_unit' => true,
		'item_weight_iso_unit' => true,
		'item_volume_sap_unit' => true,
		'item_volume_iso_unit' => true,
		'material_group' => true,
		'material_pricing_group' => true,
		'batch' => true,
		'plant' => true,
		'storage_location' => true,
		'shipping_point' => true,
		'shipping_type' => true,
		'delivery_priority' => true,
		'delivery_date_type_rule' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'sales_document_rjcn_reason' => true,
		'wbs_element' => true,
		'profit_center' => true,
		'reference_sd_document' => true,
		'reference_sd_document_item' => true,
		'to_partner' => false,
		'to_sales_order_without_charge' => false,
		'to_schedule_line' => false,
		'to_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_order_without_charge_item' => 'SalesOrderWithoutChargeItem',
        'higher_level_item' => 'HigherLevelItem',
        'sls_ord_wthout_chrg_item_category' => 'SlsOrdWthoutChrgItemCategory',
        'sales_order_wthout_chrg_item_text' => 'SalesOrderWthoutChrgItemText',
        'purchase_order_by_customer' => 'PurchaseOrderByCustomer',
        'material' => 'Material',
        'material_by_customer' => 'MaterialByCustomer',
        'requested_quantity' => 'RequestedQuantity',
        'requested_quantity_unit' => 'RequestedQuantityUnit',
        'requested_quantity_sap_unit' => 'RequestedQuantitySAPUnit',
        'requested_quantity_iso_unit' => 'RequestedQuantityISOUnit',
        'item_weight_sap_unit' => 'ItemWeightSAPUnit',
        'item_weight_iso_unit' => 'ItemWeightISOUnit',
        'item_volume_sap_unit' => 'ItemVolumeSAPUnit',
        'item_volume_iso_unit' => 'ItemVolumeISOUnit',
        'material_group' => 'MaterialGroup',
        'material_pricing_group' => 'MaterialPricingGroup',
        'batch' => 'Batch',
        'plant' => 'Plant',
        'storage_location' => 'StorageLocation',
        'shipping_point' => 'ShippingPoint',
        'shipping_type' => 'ShippingType',
        'delivery_priority' => 'DeliveryPriority',
        'delivery_date_type_rule' => 'DeliveryDateTypeRule',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'sales_document_rjcn_reason' => 'SalesDocumentRjcnReason',
        'wbs_element' => 'WBSElement',
        'profit_center' => 'ProfitCenter',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_item' => 'ReferenceSDDocumentItem',
        'to_partner' => 'to_Partner',
        'to_sales_order_without_charge' => 'to_SalesOrderWithoutCharge',
        'to_schedule_line' => 'to_ScheduleLine',
        'to_text' => 'to_Text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_order_without_charge_item' => 'setSalesOrderWithoutChargeItem',
        'higher_level_item' => 'setHigherLevelItem',
        'sls_ord_wthout_chrg_item_category' => 'setSlsOrdWthoutChrgItemCategory',
        'sales_order_wthout_chrg_item_text' => 'setSalesOrderWthoutChrgItemText',
        'purchase_order_by_customer' => 'setPurchaseOrderByCustomer',
        'material' => 'setMaterial',
        'material_by_customer' => 'setMaterialByCustomer',
        'requested_quantity' => 'setRequestedQuantity',
        'requested_quantity_unit' => 'setRequestedQuantityUnit',
        'requested_quantity_sap_unit' => 'setRequestedQuantitySapUnit',
        'requested_quantity_iso_unit' => 'setRequestedQuantityIsoUnit',
        'item_weight_sap_unit' => 'setItemWeightSapUnit',
        'item_weight_iso_unit' => 'setItemWeightIsoUnit',
        'item_volume_sap_unit' => 'setItemVolumeSapUnit',
        'item_volume_iso_unit' => 'setItemVolumeIsoUnit',
        'material_group' => 'setMaterialGroup',
        'material_pricing_group' => 'setMaterialPricingGroup',
        'batch' => 'setBatch',
        'plant' => 'setPlant',
        'storage_location' => 'setStorageLocation',
        'shipping_point' => 'setShippingPoint',
        'shipping_type' => 'setShippingType',
        'delivery_priority' => 'setDeliveryPriority',
        'delivery_date_type_rule' => 'setDeliveryDateTypeRule',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'sales_document_rjcn_reason' => 'setSalesDocumentRjcnReason',
        'wbs_element' => 'setWbsElement',
        'profit_center' => 'setProfitCenter',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_item' => 'setReferenceSdDocumentItem',
        'to_partner' => 'setToPartner',
        'to_sales_order_without_charge' => 'setToSalesOrderWithoutCharge',
        'to_schedule_line' => 'setToScheduleLine',
        'to_text' => 'setToText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_order_without_charge_item' => 'getSalesOrderWithoutChargeItem',
        'higher_level_item' => 'getHigherLevelItem',
        'sls_ord_wthout_chrg_item_category' => 'getSlsOrdWthoutChrgItemCategory',
        'sales_order_wthout_chrg_item_text' => 'getSalesOrderWthoutChrgItemText',
        'purchase_order_by_customer' => 'getPurchaseOrderByCustomer',
        'material' => 'getMaterial',
        'material_by_customer' => 'getMaterialByCustomer',
        'requested_quantity' => 'getRequestedQuantity',
        'requested_quantity_unit' => 'getRequestedQuantityUnit',
        'requested_quantity_sap_unit' => 'getRequestedQuantitySapUnit',
        'requested_quantity_iso_unit' => 'getRequestedQuantityIsoUnit',
        'item_weight_sap_unit' => 'getItemWeightSapUnit',
        'item_weight_iso_unit' => 'getItemWeightIsoUnit',
        'item_volume_sap_unit' => 'getItemVolumeSapUnit',
        'item_volume_iso_unit' => 'getItemVolumeIsoUnit',
        'material_group' => 'getMaterialGroup',
        'material_pricing_group' => 'getMaterialPricingGroup',
        'batch' => 'getBatch',
        'plant' => 'getPlant',
        'storage_location' => 'getStorageLocation',
        'shipping_point' => 'getShippingPoint',
        'shipping_type' => 'getShippingType',
        'delivery_priority' => 'getDeliveryPriority',
        'delivery_date_type_rule' => 'getDeliveryDateTypeRule',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'sales_document_rjcn_reason' => 'getSalesDocumentRjcnReason',
        'wbs_element' => 'getWbsElement',
        'profit_center' => 'getProfitCenter',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_item' => 'getReferenceSdDocumentItem',
        'to_partner' => 'getToPartner',
        'to_sales_order_without_charge' => 'getToSalesOrderWithoutCharge',
        'to_schedule_line' => 'getToScheduleLine',
        'to_text' => 'getToText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sales_order_without_charge_item', $data ?? [], null);
        $this->setIfExists('higher_level_item', $data ?? [], null);
        $this->setIfExists('sls_ord_wthout_chrg_item_category', $data ?? [], null);
        $this->setIfExists('sales_order_wthout_chrg_item_text', $data ?? [], null);
        $this->setIfExists('purchase_order_by_customer', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('material_by_customer', $data ?? [], null);
        $this->setIfExists('requested_quantity', $data ?? [], null);
        $this->setIfExists('requested_quantity_unit', $data ?? [], null);
        $this->setIfExists('requested_quantity_sap_unit', $data ?? [], null);
        $this->setIfExists('requested_quantity_iso_unit', $data ?? [], null);
        $this->setIfExists('item_weight_sap_unit', $data ?? [], null);
        $this->setIfExists('item_weight_iso_unit', $data ?? [], null);
        $this->setIfExists('item_volume_sap_unit', $data ?? [], null);
        $this->setIfExists('item_volume_iso_unit', $data ?? [], null);
        $this->setIfExists('material_group', $data ?? [], null);
        $this->setIfExists('material_pricing_group', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('shipping_point', $data ?? [], null);
        $this->setIfExists('shipping_type', $data ?? [], null);
        $this->setIfExists('delivery_priority', $data ?? [], null);
        $this->setIfExists('delivery_date_type_rule', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('sales_document_rjcn_reason', $data ?? [], null);
        $this->setIfExists('wbs_element', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_item', $data ?? [], null);
        $this->setIfExists('to_partner', $data ?? [], null);
        $this->setIfExists('to_sales_order_without_charge', $data ?? [], null);
        $this->setIfExists('to_schedule_line', $data ?? [], null);
        $this->setIfExists('to_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sales_order_without_charge_item'] === null) {
            $invalidProperties[] = "'sales_order_without_charge_item' can't be null";
        }
        if ((mb_strlen($this->container['sales_order_without_charge_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_order_without_charge_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['higher_level_item']) && (mb_strlen($this->container['higher_level_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'higher_level_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sls_ord_wthout_chrg_item_category']) && (mb_strlen($this->container['sls_ord_wthout_chrg_item_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sls_ord_wthout_chrg_item_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_order_wthout_chrg_item_text']) && (mb_strlen($this->container['sales_order_wthout_chrg_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'sales_order_wthout_chrg_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['purchase_order_by_customer']) && (mb_strlen($this->container['purchase_order_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['material_by_customer']) && (mb_strlen($this->container['material_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'material_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['requested_quantity_unit']) && (mb_strlen($this->container['requested_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'requested_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['requested_quantity_sap_unit']) && (mb_strlen($this->container['requested_quantity_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'requested_quantity_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['requested_quantity_iso_unit']) && (mb_strlen($this->container['requested_quantity_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'requested_quantity_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_sap_unit']) && (mb_strlen($this->container['item_weight_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_iso_unit']) && (mb_strlen($this->container['item_weight_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_sap_unit']) && (mb_strlen($this->container['item_volume_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_iso_unit']) && (mb_strlen($this->container['item_volume_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['material_group']) && (mb_strlen($this->container['material_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'material_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['material_pricing_group']) && (mb_strlen($this->container['material_pricing_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'material_pricing_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_point']) && (mb_strlen($this->container['shipping_point']) > 4)) {
            $invalidProperties[] = "invalid value for 'shipping_point', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_type']) && (mb_strlen($this->container['shipping_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_priority']) && (mb_strlen($this->container['delivery_priority']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_priority', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_date_type_rule']) && (mb_strlen($this->container['delivery_date_type_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'delivery_date_type_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['sales_document_rjcn_reason']) && (mb_strlen($this->container['sales_document_rjcn_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_document_rjcn_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['wbs_element']) && (mb_strlen($this->container['wbs_element']) > 24)) {
            $invalidProperties[] = "invalid value for 'wbs_element', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_item']) && (mb_strlen($this->container['reference_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_order_without_charge_item
     *
     * @return string
     */
    public function getSalesOrderWithoutChargeItem()
    {
        return $this->container['sales_order_without_charge_item'];
    }

    /**
     * Sets sales_order_without_charge_item
     *
     * @param string $sales_order_without_charge_item Sales Order Without Charge Item
     *
     * @return self
     */
    public function setSalesOrderWithoutChargeItem($sales_order_without_charge_item)
    {
        if (is_null($sales_order_without_charge_item)) {
            throw new \InvalidArgumentException('non-nullable sales_order_without_charge_item cannot be null');
        }
        if ((mb_strlen($sales_order_without_charge_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_without_charge_item when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['sales_order_without_charge_item'] = $sales_order_without_charge_item;

        return $this;
    }

    /**
     * Gets higher_level_item
     *
     * @return string|null
     */
    public function getHigherLevelItem()
    {
        return $this->container['higher_level_item'];
    }

    /**
     * Sets higher_level_item
     *
     * @param string|null $higher_level_item Higher-Level Item in Bill of Material Structures
     *
     * @return self
     */
    public function setHigherLevelItem($higher_level_item)
    {
        if (is_null($higher_level_item)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item) && (mb_strlen($higher_level_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['higher_level_item'] = $higher_level_item;

        return $this;
    }

    /**
     * Gets sls_ord_wthout_chrg_item_category
     *
     * @return string|null
     */
    public function getSlsOrdWthoutChrgItemCategory()
    {
        return $this->container['sls_ord_wthout_chrg_item_category'];
    }

    /**
     * Sets sls_ord_wthout_chrg_item_category
     *
     * @param string|null $sls_ord_wthout_chrg_item_category Sales Document Item Category
     *
     * @return self
     */
    public function setSlsOrdWthoutChrgItemCategory($sls_ord_wthout_chrg_item_category)
    {
        if (is_null($sls_ord_wthout_chrg_item_category)) {
            array_push($this->openAPINullablesSetToNull, 'sls_ord_wthout_chrg_item_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sls_ord_wthout_chrg_item_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sls_ord_wthout_chrg_item_category) && (mb_strlen($sls_ord_wthout_chrg_item_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sls_ord_wthout_chrg_item_category when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['sls_ord_wthout_chrg_item_category'] = $sls_ord_wthout_chrg_item_category;

        return $this;
    }

    /**
     * Gets sales_order_wthout_chrg_item_text
     *
     * @return string|null
     */
    public function getSalesOrderWthoutChrgItemText()
    {
        return $this->container['sales_order_wthout_chrg_item_text'];
    }

    /**
     * Sets sales_order_wthout_chrg_item_text
     *
     * @param string|null $sales_order_wthout_chrg_item_text Short Text for Sales Order Item
     *
     * @return self
     */
    public function setSalesOrderWthoutChrgItemText($sales_order_wthout_chrg_item_text)
    {
        if (is_null($sales_order_wthout_chrg_item_text)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_wthout_chrg_item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_wthout_chrg_item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_wthout_chrg_item_text) && (mb_strlen($sales_order_wthout_chrg_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_wthout_chrg_item_text when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['sales_order_wthout_chrg_item_text'] = $sales_order_wthout_chrg_item_text;

        return $this;
    }

    /**
     * Gets purchase_order_by_customer
     *
     * @return string|null
     */
    public function getPurchaseOrderByCustomer()
    {
        return $this->container['purchase_order_by_customer'];
    }

    /**
     * Sets purchase_order_by_customer
     *
     * @param string|null $purchase_order_by_customer purchase_order_by_customer
     *
     * @return self
     */
    public function setPurchaseOrderByCustomer($purchase_order_by_customer)
    {
        if (is_null($purchase_order_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_customer) && (mb_strlen($purchase_order_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_customer when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_customer'] = $purchase_order_by_customer;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            array_push($this->openAPINullablesSetToNull, 'material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material) && (mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets material_by_customer
     *
     * @return string|null
     */
    public function getMaterialByCustomer()
    {
        return $this->container['material_by_customer'];
    }

    /**
     * Sets material_by_customer
     *
     * @param string|null $material_by_customer Material Number Used by Customer
     *
     * @return self
     */
    public function setMaterialByCustomer($material_by_customer)
    {
        if (is_null($material_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'material_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_by_customer) && (mb_strlen($material_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $material_by_customer when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 35.');
        }

        $this->container['material_by_customer'] = $material_by_customer;

        return $this;
    }

    /**
     * Gets requested_quantity
     *
     * @return float|null
     */
    public function getRequestedQuantity()
    {
        return $this->container['requested_quantity'];
    }

    /**
     * Sets requested_quantity
     *
     * @param float|null $requested_quantity requested_quantity
     *
     * @return self
     */
    public function setRequestedQuantity($requested_quantity)
    {
        if (is_null($requested_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['requested_quantity'] = $requested_quantity;

        return $this;
    }

    /**
     * Gets requested_quantity_unit
     *
     * @return string|null
     */
    public function getRequestedQuantityUnit()
    {
        return $this->container['requested_quantity_unit'];
    }

    /**
     * Sets requested_quantity_unit
     *
     * @param string|null $requested_quantity_unit Unit of the Requested Quantity
     *
     * @return self
     */
    public function setRequestedQuantityUnit($requested_quantity_unit)
    {
        if (is_null($requested_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($requested_quantity_unit) && (mb_strlen($requested_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $requested_quantity_unit when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['requested_quantity_unit'] = $requested_quantity_unit;

        return $this;
    }

    /**
     * Gets requested_quantity_sap_unit
     *
     * @return string|null
     */
    public function getRequestedQuantitySapUnit()
    {
        return $this->container['requested_quantity_sap_unit'];
    }

    /**
     * Sets requested_quantity_sap_unit
     *
     * @param string|null $requested_quantity_sap_unit SAP Unit Code for Requested Quantity
     *
     * @return self
     */
    public function setRequestedQuantitySapUnit($requested_quantity_sap_unit)
    {
        if (is_null($requested_quantity_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($requested_quantity_sap_unit) && (mb_strlen($requested_quantity_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $requested_quantity_sap_unit when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['requested_quantity_sap_unit'] = $requested_quantity_sap_unit;

        return $this;
    }

    /**
     * Gets requested_quantity_iso_unit
     *
     * @return string|null
     */
    public function getRequestedQuantityIsoUnit()
    {
        return $this->container['requested_quantity_iso_unit'];
    }

    /**
     * Sets requested_quantity_iso_unit
     *
     * @param string|null $requested_quantity_iso_unit ISO Unit Code for Requested Quantity
     *
     * @return self
     */
    public function setRequestedQuantityIsoUnit($requested_quantity_iso_unit)
    {
        if (is_null($requested_quantity_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($requested_quantity_iso_unit) && (mb_strlen($requested_quantity_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $requested_quantity_iso_unit when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['requested_quantity_iso_unit'] = $requested_quantity_iso_unit;

        return $this;
    }

    /**
     * Gets item_weight_sap_unit
     *
     * @return string|null
     */
    public function getItemWeightSapUnit()
    {
        return $this->container['item_weight_sap_unit'];
    }

    /**
     * Sets item_weight_sap_unit
     *
     * @param string|null $item_weight_sap_unit SAP Unit Code for Item Weight
     *
     * @return self
     */
    public function setItemWeightSapUnit($item_weight_sap_unit)
    {
        if (is_null($item_weight_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_sap_unit) && (mb_strlen($item_weight_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_sap_unit when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_sap_unit'] = $item_weight_sap_unit;

        return $this;
    }

    /**
     * Gets item_weight_iso_unit
     *
     * @return string|null
     */
    public function getItemWeightIsoUnit()
    {
        return $this->container['item_weight_iso_unit'];
    }

    /**
     * Sets item_weight_iso_unit
     *
     * @param string|null $item_weight_iso_unit ISO Unit Code for Item Weight
     *
     * @return self
     */
    public function setItemWeightIsoUnit($item_weight_iso_unit)
    {
        if (is_null($item_weight_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_iso_unit) && (mb_strlen($item_weight_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_iso_unit when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_iso_unit'] = $item_weight_iso_unit;

        return $this;
    }

    /**
     * Gets item_volume_sap_unit
     *
     * @return string|null
     */
    public function getItemVolumeSapUnit()
    {
        return $this->container['item_volume_sap_unit'];
    }

    /**
     * Sets item_volume_sap_unit
     *
     * @param string|null $item_volume_sap_unit SAP Unit Code for Item Volume
     *
     * @return self
     */
    public function setItemVolumeSapUnit($item_volume_sap_unit)
    {
        if (is_null($item_volume_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_sap_unit) && (mb_strlen($item_volume_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_sap_unit when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_sap_unit'] = $item_volume_sap_unit;

        return $this;
    }

    /**
     * Gets item_volume_iso_unit
     *
     * @return string|null
     */
    public function getItemVolumeIsoUnit()
    {
        return $this->container['item_volume_iso_unit'];
    }

    /**
     * Sets item_volume_iso_unit
     *
     * @param string|null $item_volume_iso_unit ISO Unit Code for Item Volume
     *
     * @return self
     */
    public function setItemVolumeIsoUnit($item_volume_iso_unit)
    {
        if (is_null($item_volume_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_iso_unit) && (mb_strlen($item_volume_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_iso_unit when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_iso_unit'] = $item_volume_iso_unit;

        return $this;
    }

    /**
     * Gets material_group
     *
     * @return string|null
     */
    public function getMaterialGroup()
    {
        return $this->container['material_group'];
    }

    /**
     * Sets material_group
     *
     * @param string|null $material_group material_group
     *
     * @return self
     */
    public function setMaterialGroup($material_group)
    {
        if (is_null($material_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_group) && (mb_strlen($material_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $material_group when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 9.');
        }

        $this->container['material_group'] = $material_group;

        return $this;
    }

    /**
     * Gets material_pricing_group
     *
     * @return string|null
     */
    public function getMaterialPricingGroup()
    {
        return $this->container['material_pricing_group'];
    }

    /**
     * Sets material_pricing_group
     *
     * @param string|null $material_pricing_group material_pricing_group
     *
     * @return self
     */
    public function setMaterialPricingGroup($material_pricing_group)
    {
        if (is_null($material_pricing_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_pricing_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_pricing_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_pricing_group) && (mb_strlen($material_pricing_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $material_pricing_group when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['material_pricing_group'] = $material_pricing_group;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant Plant (Own or External)
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            array_push($this->openAPINullablesSetToNull, 'plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant) && (mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets shipping_point
     *
     * @return string|null
     */
    public function getShippingPoint()
    {
        return $this->container['shipping_point'];
    }

    /**
     * Sets shipping_point
     *
     * @param string|null $shipping_point Shipping Point / Receiving Point
     *
     * @return self
     */
    public function setShippingPoint($shipping_point)
    {
        if (is_null($shipping_point)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_point) && (mb_strlen($shipping_point) > 4)) {
            throw new \InvalidArgumentException('invalid length for $shipping_point when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['shipping_point'] = $shipping_point;

        return $this;
    }

    /**
     * Gets shipping_type
     *
     * @return string|null
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     *
     * @param string|null $shipping_type shipping_type
     *
     * @return self
     */
    public function setShippingType($shipping_type)
    {
        if (is_null($shipping_type)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_type) && (mb_strlen($shipping_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_type when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets delivery_priority
     *
     * @return string|null
     */
    public function getDeliveryPriority()
    {
        return $this->container['delivery_priority'];
    }

    /**
     * Sets delivery_priority
     *
     * @param string|null $delivery_priority delivery_priority
     *
     * @return self
     */
    public function setDeliveryPriority($delivery_priority)
    {
        if (is_null($delivery_priority)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_priority) && (mb_strlen($delivery_priority) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_priority when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['delivery_priority'] = $delivery_priority;

        return $this;
    }

    /**
     * Gets delivery_date_type_rule
     *
     * @return string|null
     */
    public function getDeliveryDateTypeRule()
    {
        return $this->container['delivery_date_type_rule'];
    }

    /**
     * Sets delivery_date_type_rule
     *
     * @param string|null $delivery_date_type_rule Delivery Date Rule
     *
     * @return self
     */
    public function setDeliveryDateTypeRule($delivery_date_type_rule)
    {
        if (is_null($delivery_date_type_rule)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date_type_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date_type_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_date_type_rule) && (mb_strlen($delivery_date_type_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $delivery_date_type_rule when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['delivery_date_type_rule'] = $delivery_date_type_rule;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets sales_document_rjcn_reason
     *
     * @return string|null
     */
    public function getSalesDocumentRjcnReason()
    {
        return $this->container['sales_document_rjcn_reason'];
    }

    /**
     * Sets sales_document_rjcn_reason
     *
     * @param string|null $sales_document_rjcn_reason Reason for Rejection of Sales Documents
     *
     * @return self
     */
    public function setSalesDocumentRjcnReason($sales_document_rjcn_reason)
    {
        if (is_null($sales_document_rjcn_reason)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_rjcn_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_rjcn_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_rjcn_reason) && (mb_strlen($sales_document_rjcn_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_rjcn_reason when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['sales_document_rjcn_reason'] = $sales_document_rjcn_reason;

        return $this;
    }

    /**
     * Gets wbs_element
     *
     * @return string|null
     */
    public function getWbsElement()
    {
        return $this->container['wbs_element'];
    }

    /**
     * Sets wbs_element
     *
     * @param string|null $wbs_element Work Breakdown Structure Element (WBS Element)
     *
     * @return self
     */
    public function setWbsElement($wbs_element)
    {
        if (is_null($wbs_element)) {
            array_push($this->openAPINullablesSetToNull, 'wbs_element');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wbs_element', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($wbs_element) && (mb_strlen($wbs_element) > 24)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 24.');
        }

        $this->container['wbs_element'] = $wbs_element;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            array_push($this->openAPINullablesSetToNull, 'profit_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profit_center) && (mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document Document Number of Reference Document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_item
     *
     * @return string|null
     */
    public function getReferenceSdDocumentItem()
    {
        return $this->container['reference_sd_document_item'];
    }

    /**
     * Sets reference_sd_document_item
     *
     * @param string|null $reference_sd_document_item Item Number of the Reference Item
     *
     * @return self
     */
    public function setReferenceSdDocumentItem($reference_sd_document_item)
    {
        if (is_null($reference_sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_item) && (mb_strlen($reference_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_item when calling APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['reference_sd_document_item'] = $reference_sd_document_item;

        return $this;
    }

    /**
     * Gets to_partner
     *
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToPartner|null
     */
    public function getToPartner()
    {
        return $this->container['to_partner'];
    }

    /**
     * Sets to_partner
     *
     * @param \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToPartner|null $to_partner to_partner
     *
     * @return self
     */
    public function setToPartner($to_partner)
    {
        if (is_null($to_partner)) {
            throw new \InvalidArgumentException('non-nullable to_partner cannot be null');
        }
        $this->container['to_partner'] = $to_partner;

        return $this;
    }

    /**
     * Gets to_sales_order_without_charge
     *
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeCreate|null
     */
    public function getToSalesOrderWithoutCharge()
    {
        return $this->container['to_sales_order_without_charge'];
    }

    /**
     * Sets to_sales_order_without_charge
     *
     * @param \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeTypeCreate|null $to_sales_order_without_charge to_sales_order_without_charge
     *
     * @return self
     */
    public function setToSalesOrderWithoutCharge($to_sales_order_without_charge)
    {
        if (is_null($to_sales_order_without_charge)) {
            throw new \InvalidArgumentException('non-nullable to_sales_order_without_charge cannot be null');
        }
        $this->container['to_sales_order_without_charge'] = $to_sales_order_without_charge;

        return $this;
    }

    /**
     * Gets to_schedule_line
     *
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToScheduleLine|null
     */
    public function getToScheduleLine()
    {
        return $this->container['to_schedule_line'];
    }

    /**
     * Sets to_schedule_line
     *
     * @param \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToScheduleLine|null $to_schedule_line to_schedule_line
     *
     * @return self
     */
    public function setToScheduleLine($to_schedule_line)
    {
        if (is_null($to_schedule_line)) {
            throw new \InvalidArgumentException('non-nullable to_schedule_line cannot be null');
        }
        $this->container['to_schedule_line'] = $to_schedule_line;

        return $this;
    }

    /**
     * Gets to_text
     *
     * @return \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToText|null
     */
    public function getToText()
    {
        return $this->container['to_text'];
    }

    /**
     * Sets to_text
     *
     * @param \BeLenka\SAP\SalesOrderWOCharge\Model\APISALESORDERWITHOUTCHARGESRVASalesOrderWithoutChargeItemTypeCreateToText|null $to_text to_text
     *
     * @return self
     */
    public function setToText($to_text)
    {
        if (is_null($to_text)) {
            throw new \InvalidArgumentException('non-nullable to_text cannot be null');
        }
        $this->container['to_text'] = $to_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


